import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from fpdf import FPDF
import json

# --- CONFIGURACI√ìN DE LA P√ÅGINA ---
st.set_page_config(page_title="Generador de PDI", page_icon="üìÑ", layout="centered")
st.title("üìÑ Generador de Planes de Desarrollo Individual (PDI)")
st.write("Esta aplicaci√≥n genera un PDI en PDF a partir de los datos de una hoja de c√°lculo de Google.")

# --- CONEXI√ìN SEGURA CON GOOGLE SHEETS (VERSI√ìN ACTUALIZADA) ---
@st.cache_resource
def conectar_google_sheets():
    try:
        scopes = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/spreadsheets', "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
        
        # CAMBIO CLAVE: Leemos el JSON desde un string simple en los secretos
        if "google_creds_json" in st.secrets:
            creds_dict = json.loads(st.secrets["google_creds_json"])
        else:
            with open("credentials.json", "r") as f:
                creds_dict = json.load(f)

        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        client = gspread.authorize(creds)
        return client
    except FileNotFoundError:
        st.error("No se encontr√≥ el archivo 'credentials.json'. Aseg√∫rate de que est√© en la misma carpeta que app.py.")
        return None
    except Exception as e:
        st.error(f"Error de conexi√≥n con Google Sheets: {e}")
        return None

# --- GENERACI√ìN DE PDF (Sin cambios) ---
def generar_pdf(datos_empleado):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=10)
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, "PLAN DE DESARROLLO INDIVIDUAL (PDI)", ln=True, align='C')
    pdf.ln(10)
    def agregar_campo(etiqueta, valor_columna):
        pdf.set_font("Arial", 'B', 10)
        pdf.multi_cell(0, 6, f"{etiqueta}:", 0, 'L')
        pdf.set_font("Arial", '', 10)
        valor = str(datos_empleado.get(valor_columna, 'N/A'))
        pdf.multi_cell(0, 6, valor, 0, 'L')
        pdf.ln(2)
    def agregar_seccion(titulo, campos):
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 8, titulo, ln=True, align='L')
        for etiqueta, columna in campos.items():
            agregar_campo(etiqueta, columna)
        pdf.ln(5)
    agregar_seccion("1. Datos Personales y Laborales", {"Apellido y Nombre": "Apellido y Nombre", "DNI": "DNI", "Correo electr√≥nico": "Correo electr√≥nico", "N√∫mero de contacto": "N√∫mero de contacto", "Edad": "Edad", "Posici√≥n actual": "Posici√≥n actual", "Fecha de ingreso": "Fecha de ingreso a la empresa", "Lugar de trabajo": "Lugar de trabajo"})
    agregar_seccion("2. Formaci√≥n y Nivel Educativo", {"Nivel educativo": "Nivel educativo alcanzado", "T√≠tulo obtenido": "T√≠tulo obtenido (si corresponde)", "Otras capacitaciones": "Otras capacitaciones realizadas fuera de la empresa finalizadas (Mencionar)", "Puesto relacionado con formaci√≥n": "Su puesto actual ¬øest√° relacionado con su formaci√≥n acad√©mica?"})
    agregar_seccion("3. Inter√©s de Desarrollo", {"Interesado en desarrollar carrera": "¬øLe interesar√≠a desarrollar su carrera dentro de la empresa?", "√Årea de inter√©s futura": "¬øEn qu√© √°rea de la empresa le gustar√≠a desarrollarse en el futuro?", "Puesto al que aspira": "¬øQu√© tipo de puesto aspira ocupar en el futuro?", "Motivaciones para cambiar": "¬øCu√°les son los principales factores que lo motivar√≠an en su decisi√≥n de cambiar de posici√≥n dentro de la empresa? (Seleccione hasta 3 opciones)"})
    agregar_seccion("4. Necesidades de Capacitaci√≥n", {"Competencias a capacitar": "¬øEn qu√© competencias o conocimientos le gustar√≠a capacitarse para mejorar sus oportunidades de desarrollo?", "Especificaci√≥n de inter√©s": "A partir de su respuesta anterior, por favor, especifique en qu√© competencia o conocimiento le gustar√≠a capacitarse"})
    agregar_seccion("5. Fortalezas y Obst√°culos", {"Fortalezas profesionales": "¬øCu√°les considera que son sus principales fortalezas profesionales?", "Obst√°culos para el desarrollo": "¬øQu√© obst√°culos encuentra para su desarrollo profesional dentro de la empresa?"})
    agregar_seccion("6. Proyecci√≥n y Crecimiento", {"Desea recibir asesoramiento": "¬øLe gustar√≠a recibir asesoramiento sobre su plan de desarrollo profesional dentro de la empresa?", "Dispuesto a nuevos desaf√≠os": "¬øEstar√≠a dispuesto a asumir nuevas responsabilidades o desaf√≠os para avanzar en su carrera dentro de la empresa?", "Comentarios adicionales": "Si desea agregar alg√∫n comentario sobre su desarrollo profesional en la empresa, puede hacerlo aqu√≠:"})
    return pdf.output(dest='S').encode('latin-1')

# --- INTERFAZ DE STREAMLIT (Sin cambios) ---
url_google_sheet = st.text_input(
    "Ingresa la URL de tu Hoja de C√°lculo de Google:",
    "https://docs.google.com/spreadsheets/d/1Uo5qFK34s94xGLO6WF3QuBGRLZi7XDYxcYVGZx79z_M/edit?usp=sharing"
)

if url_google_sheet:
    client = conectar_google_sheets()
    if client:
        try:
            spreadsheet = client.open_by_url(url_google_sheet)
            nombre_de_la_hoja = "Respuestas de formulario 1"
            sheet = spreadsheet.worksheet(nombre_de_la_hoja)
            all_values = sheet.get_all_values()
            
            if len(all_values) < 2:
                st.warning("La hoja de c√°lculo est√° vac√≠a o solo tiene la fila de t√≠tulos.")
            else:
                df = pd.DataFrame(all_values[1:], columns=all_values[0])
                st.success("¬°Datos cargados correctamente! ‚úÖ")

                columna_nombre = "Apellido y Nombre"
                if columna_nombre in df.columns:
                    empleados = df[columna_nombre].dropna().unique()
                    empleado_seleccionado = st.selectbox("Selecciona un empleado:", empleados)

                    if empleado_seleccionado:
                        datos_empleado = df[df[columna_nombre] == empleado_seleccionado].iloc[0].to_dict()
                        if st.button(f"Generar PDF para {empleado_seleccionado}"):
                            pdf_bytes = generar_pdf(datos_empleado)
                            st.download_button(
                                label="üì• Descargar PDF",
                                data=pdf_bytes,
                                file_name=f"PDI_{empleado_seleccionado.replace(' ', '_')}.pdf",
                                mime="application/octet-stream"
                            )
                else:
                    st.error(f"Error: No se encontr√≥ la columna '{columna_nombre}' en la hoja.")
                    st.write("Columnas encontradas:", df.columns.tolist())

        except gspread.exceptions.WorksheetNotFound:
            st.error(f"No se encontr√≥ la pesta√±a llamada '{nombre_de_la_hoja}'. Revisa el nombre en tu Google Sheet.")
        except Exception as e:
            st.error(f"Ocurri√≥ un error inesperado al procesar la hoja: {e}")
